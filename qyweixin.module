<?php

use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;
use Drupal\qyweixin\Corp;

/**
 * Implements hook_ENTITY_TYPE_insert for user entity type.
 */
function qyweixin_user_insert(Drupal\user\UserInterface $user) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$u=new stdClass();
		$u->userid=$user->id();
		$u->name=$user->getDisplayName();
		$u->email=$user->getEmail();
		$u->department=[1];
		foreach(Role::loadMultiple($user->getRoles(TRUE)) as $role) {
			$u->department[]=$role->getThirdPartySetting('qyweixin','departmentid');
		}
		
		Corp::userCreate($u);
		
		Drupal::logger('qyweixin')->info('User !user has been added into qyweixin.',
			array('!user'=>$user->getDisplayName())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !user into qyweixin failed: !errcode: !errmsg.',
			array('!user'=>$user->getDisplayName(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_update for user entity type.
 */
function qyweixin_user_update(Drupal\user\UserInterface $user) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$u=new stdClass();
		$u->userid=$user->id();
		$u->name=$user->getDisplayName();
		$u->email=$user->getEmail();
		$u->department=[1];
		foreach(Role::loadMultiple($user->getRoles(TRUE)) as $role) {
			$u->department[]=$role->getThirdPartySetting('qyweixin','departmentid');
		}
		$u->enable=$user->isActive();
		
		Corp::userUpdate($u);
		
		Drupal::logger('qyweixin')->info('User !user has been updated into qyweixin.',
			array('!user'=>$user->getDisplayName())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !user into qyweixin failed: !errcode: !errmsg.',
			array('!user'=>$user->getDisplayName(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_predelete for user entity type.
 */
function qyweixin_user_predelete(Drupal\user\UserInterface $user) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		Corp::userDelete($user->id());
		
		Drupal::logger('qyweixin')->info('User !user has been deleted from qyweixin.',
			array('!user'=>$user->getDisplayName())
		);
	} catch (\Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !user into qyweixin failed: !errcode: !errmsg.',
			array('!user'=>$user->getDisplayName(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_presave for user_role entity type.
 */
function qyweixin_user_role_presave(Drupal\user\RoleInterface $role) {
	$departmentid=$role->getThirdPartySetting('qyweixin','departmentid');
	if(empty($departmentid)) {
		$max_department_id=Drupal::state()->get('qyweixin.max_department_id', 1)+1;
		$role->setThirdPartySetting('qyweixin','departmentid',(string)$max_department_id);
		Drupal::state()->set('qyweixin.max_department_id', $max_department_id);
	}
}

/**
 * Implements hook_ENTITY_TYPE_insert for user_role entity type.
 */
function qyweixin_user_role_insert(Drupal\user\RoleInterface $role) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$r=new stdClass();
		$r->id=(int)$role->getThirdPartySetting('qyweixin','departmentid');
		$r->name=$role->label();
		$r->order=$role->getWeight();
		$r->parentid='1';
		
		Corp::departmentCreate($r);

		Drupal::logger('qyweixin')->info('Role !role as of department has been added into qyweixin.',
			array('!role'=>$role->label())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !role into qyweixin failed: !errcode: !errmsg.',
			array('!role'=>$role->label(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_update for user_role entity type.
 */
function qyweixin_user_role_update(Drupal\user\RoleInterface $role) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$r=new stdClass();
		$r->id=$role->getThirdPartySetting('qyweixin','departmentid');
		$r->name=$role->label();
		$r->order=$role->getWeight();
		$r->parentid='1';
		
		Corp::departmentUpdate($r);

		Drupal::logger('qyweixin')->info('Role !role as of department has been updated into qyweixin.',
			array('!role'=>$role->label())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !role into qyweixin failed: !errcode: !errmsg.',
			array('!role'=>$role->label(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_predelete for user_role entity type.
 */
function qyweixin_user_role_predelete(Drupal\user\RoleInterface $role) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		// First lets remove the role from related users
		// TODO: this may be a long time operation, so should be re-impleneted via batch API.
		$userlist=Corp::userSimpleList($role->getThirdPartySetting('qyweixin','departmentid'), TRUE, Corp::USER_SUBSCRIBE_STATUS_ALL);
		foreach($userlist as $user) {
			$user->department=array_diff($user->department, [$role->getThirdPartySetting('qyweixin','departmentid')]);
			Corp::userUpdate($user);
			Drupal::logger('qyweixin')->info('Department of user !user has been updated because of !role is to be removed.',
				array('!user'=>$user->getDisplayName(), '!role'=>$role->label())
			);
		}
		
		Corp::departmentDelete($role->getThirdPartySetting('qyweixin','departmentid'));

		Drupal::logger('qyweixin')->info('Role !role as of department has been deleted from qyweixin.',
			array('!role'=>$role->label())
		);
	} catch (Exception $e) {
		throw new Exception($e->getMessage(), $e->getCode());
	}
}
?>
