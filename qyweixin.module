<?php

use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;
use Drupal\qyweixin\CorpBase;

/**
 * Implements hook_ENTITY_TYPE_insert for user entity type.
 */
function qyweixin_user_insert(Drupal\user\UserInterface $user) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$u=new stdClass();
		$u->userid=$user->id();
		$u->name=$user->getDisplayName();
		$u->email=$user->getEmail();
		$u->department=[1];
		foreach(Role::loadMultiple($user->getRoles(TRUE)) as $role) {
			$u->department[]=$role->getThirdPartySetting('qyweixin','departmentid');
		}
		
		CorpBase::userCreate($u);
		
		Drupal::logger('qyweixin')->info('User !user has been added into qyweixin.',
			array('!user'=>$user->getDisplayName())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !user into qyweixin failed: !errcode: !errmsg.',
			array('!user'=>$user->getDisplayName(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_update for user entity type.
 */
function qyweixin_user_update(Drupal\user\UserInterface $user) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$u=new stdClass();
		$u->userid=$user->id();
		$u->name=$user->getDisplayName();
		$u->email=$user->getEmail();
		$u->department=[1];
		foreach(Role::loadMultiple($user->getRoles(TRUE)) as $role) {
			$u->department[]=$role->getThirdPartySetting('qyweixin','departmentid');
		}
		$u->enable=$user->isActive();
		
		CorpBase::userUpdate($u);
		
		Drupal::logger('qyweixin')->info('User !user has been updated in qyweixin.',
			array('!user'=>$user->getDisplayName())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !user into qyweixin failed: !errcode: !errmsg.',
			array('!user'=>$user->getDisplayName(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_delete for user entity type.
 */
function qyweixin_user_delete(Drupal\user\UserInterface $user) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		CorpBase::userDelete($user->id());
		
		Drupal::logger('qyweixin')->info('User !user has been deleted from qyweixin.',
			array('!user'=>$user->getDisplayName())
		);
	} catch (\Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !user into qyweixin failed: !errcode: !errmsg.',
			array('!user'=>$user->getDisplayName(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_presave for user_role entity type.
 */
function qyweixin_user_role_presave(Drupal\user\RoleInterface $role) {
	$departmentid=$role->getThirdPartySetting('qyweixin','departmentid');
	if(empty($departmentid)) {
		$max_department_id=Drupal::state()->get('qyweixin.max_department_id', 1)+1;
		$role->setThirdPartySetting('qyweixin','departmentid',(string)$max_department_id);
		Drupal::state()->set('qyweixin.max_department_id', $max_department_id);
	}
}

/**
 * Implements hook_ENTITY_TYPE_insert for user_role entity type.
 */
function qyweixin_user_role_insert(Drupal\user\RoleInterface $role) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$r=new stdClass();
		$r->id=(int)$role->getThirdPartySetting('qyweixin','departmentid');
		$r->name=$role->label();
		$r->order=$role->getWeight();
		$r->parentid='1';
		
		CorpBase::departmentCreate($r);

		Drupal::logger('qyweixin')->info('Role !role as of department has been added into qyweixin.',
			array('!role'=>$role->label())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !role into qyweixin failed: !errcode: !errmsg.',
			array('!role'=>$role->label(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_update for user_role entity type.
 */
function qyweixin_user_role_update(Drupal\user\RoleInterface $role) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		$r=new stdClass();
		$r->id=$role->getThirdPartySetting('qyweixin','departmentid');
		$r->name=$role->label();
		$r->order=$role->getWeight();
		$r->parentid='1';
		
		CorpBase::departmentUpdate($r);

		Drupal::logger('qyweixin')->info('Role !role as of department has been updated into qyweixin.',
			array('!role'=>$role->label())
		);
	} catch (Exception $e) {
		Drupal::logger('qyweixin')->error('Syncing information of !role into qyweixin failed: !errcode: !errmsg.',
			array('!role'=>$role->label(), '!errcode'=>$e->getCode(), '!errmsg'=>$e->getMessage())
		);
	}
}

/**
 * Implements hook_ENTITY_TYPE_predelete for user_role entity type.
 */
function qyweixin_user_role_predelete(Drupal\user\RoleInterface $role) {
	if(!Drupal::config('qyweixin.general')->get('autosync')) return;
	try {
		// First lets remove the role from related users
		$userlist=CorpBase::userSimpleList($role->getThirdPartySetting('qyweixin','departmentid'), TRUE, CorpBase::USER_SUBSCRIBE_STATUS_ALL);
		$i=0;
		
		// If lets then 5 users are affeted, then we just update it here.
		while($i<5 && count($userlist)) {
			$user=array_shift($userlist);
			$user->department=array_diff($user->department, [$role->getThirdPartySetting('qyweixin','departmentid')]);
			CorpBase::userUpdate($user);
			Drupal::logger('qyweixin')->info('User !user has been updated in qyweixin due to !role to be deleted.',
				array('!user'=>$user->name, '!role'=>$role->label())
			);
			$i++;
		}
		
		// If after 5 users be updated, there are still users to be proceeded, then we push them into cron queue.
		if(count($userlist)) {
			$queue=Drupal::queue('qyweixin_remove_department_from_user', TRUE);
			$i=0;
			foreach ($userlist as $user) {
				$i++;
				$queue->createItem(['user'=>$user, 'role'=>$role]);
			}
			$queue->createItem(['user'=>NULL, 'role'=>$role]);
			Drupal::logger('qyweixin')->info('!num users in department is to be updated later in cron because of !role is to be removed.',
				array('!num'=>$i)
			);
		} else {
			CorpBase::departmentDelete($role->getThirdPartySetting('qyweixin','departmentid'));
			Drupal::logger('qyweixin')->info('Role !role as of department has been deleted from qyweixin.',
				array('!role'=>$role->label())
			);
		}
	} catch (Exception $e) {
		if($e->getCode()==60003)
			Drupal::logger('qyweixin')->warning('Role !role as of department does not exist in qyweixin, so it cannot be deleted.',
				array('!role'=>$role->label())
			);
		else
			throw new Exception($e->getMessage(), $e->getCode());
	}
}

/**
 * Implements hook_cron for qyweixin module.
 */
function qyweixin_cron() {
	// Update agentList when cron runs.
	Drupal::state()->set('qyweixin.agents', CorpBase::agentList());
}

?>
